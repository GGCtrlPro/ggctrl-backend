// server.js
'use strict';

const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());

// Simple request logging middleware
app.use((req, res, next) => {
  const now = new Date().toISOString();
  console.log(`[${now}] ${req.method} ${req.url}`);
  next();
});

/**
 * Health check
 */
app.get('/', (req, res) => {
  res.send('âœ… GGCTRL backend is online!');
});

/**
 * POST /connect
 * Body: { walletAddress: string }
 *
 * Validates presence of walletAddress and checks a simple Ethereum-style format:
 * - Begins with "0x"
 * - Followed by 40 hex characters (case-insensitive)
 *
 * If you expect different wallet formats, adjust the validation accordingly.
 */
app.post('/connect', (req, res) => {
  const { walletAddress } = req.body;

  if (!walletAddress || typeof walletAddress !== 'string') {
    return res.status(400).send('Missing or invalid wallet address');
  }

  const addr = walletAddress.trim();

  // Basic Ethereum-style validation (0x + 40 hex chars). Modify if your addresses differ.
  const ethRegex = /^0x[a-fA-F0-9]{40}$/;
  if (!ethRegex.test(addr)) {
    // If you don't want strict validation, comment out the block above and this check.
    return res.status(400).send('Invalid wallet address format');
  }

  res.send(`Wallet ${addr} linked successfully.`);
});

// Start server and handle graceful shutdown
const server = app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

function shutdown(signal) {
  console.log(`Received ${signal}. Shutting down gracefully...`);
  server.close((err) => {
    if (err) {
      console.error('Error during server shutdown:', err);
      process.exit(1);
    }
    console.log('Server closed. Exiting process.');
    process.exit(0);
  });

  // Force exit if graceful shutdown takes too long
  setTimeout(() => {
    console.warn('Forcing shutdown after timeout.');
    process.exit(1);
  }, 10_000);
}

process.on('SIGINT', () => shutdown('SIGINT'));
process.on('SIGTERM', () => shutdown('SIGTERM'));

// Catch uncaught exceptions and rejections to avoid silent failures
process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err);
  shutdown('uncaughtException');
});

process.on('unhandledRejection', (reason) => {
  console.error('Unhandled Rejection:', reason);
  shutdown('unhandledRejection');
});
